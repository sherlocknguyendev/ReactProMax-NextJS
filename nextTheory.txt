
- Phong cách code MUI: có thể code CSS với Javascript (styled component) (CSS trong JSX/TSX)
    => tương tự React Native.

- Link Component/useRouter hook:
    -> Link: điều hướng trực tiếp trong phần view
    -> useRouter: khi muốn xử lý logic xog ms điều hướng (trong 1 function)

-------------------------------------------------------------------------------------

- Server Component chỉ đơn thuần là HTML (không có sự tương tác của Javascript)
    => Mặc định, tất cả “component” của Nextjs, là Server Component, Server component có thể bọc “Client component”
    => Không dùng các function xử lý sự kiện hay các hook của React
    => Lợi ích của server component:
        - Tốc độ load page nhanh
        - Cache
        - Security
        - SEO
    => Xảy ra từ khi có React 18 hỗ trợ phía server (biến đổi Component thông thường thành HTML xog ms render ra browser)
    => Server Component: Render 100% trên server, tạo ra file HTML gửi về cho client. Client chỉ việc hiển thị mà không cần làm gì khác

- Client Component: Giúp có sự tương tác với website (ví dụ: useStatae, useEffect, ...)

- 'use client': kết hợp Server Component vs Client Component, use client: không có nghĩa là 100% component sẽ được render ở phía client như CSR
    -   Phase 1: pre-render (vẽ trước)
            Nextjs sẽ tạo trước file HTML mà không có sự tương tác của JS, sau đấy gửi về client 
            (như vậy được ½ quá trình) -> Server Component
    -   Phase 2: hidrate (tưới cây)
            Client nhận về file HTML đã được render trước từ Nextjs, sau đấy dùng React để thêm 
            phần tương tác JavaScript -> Client Component

-------------------------------------------------------------------------------------

- CORS === Cross-Origin Resource Sharing: Chia sẻ tài nguyên đa nguồn 
    -> CORS là cơ chế "mặc định" của trình duyệt web (browser) khi muốn gọi/truy cập thông tin mà khác tên miền (domain)
    -> Ví dụ: + khi muốn chia sẻ dữ liệu của ng dùng từ google.com gọi sang facebook.com  -> browser chặn CORS
              + từ localhost:3000 -> gọi localhost:8000 -> chặn CORS
    
- CORS chỉ xảy ra tại browser, giúp duyệt/lướt web trở nên an toàn hơn.

- Mặc địch browser bật chặn CORS vì: 
    -> Với browser, khi bạn truy cập/gọi tới 1 domain của 1 website bất kỳ, browser sẽ tự động gửi cookies kèm theo (cookie tương ứng với website),
       Browser có cookies, nên nếu không chặn CORS, sẽ tìm ẩn nguy cơ ăn trộm cookies (cookies chứa thông tin cá nhân)

- Khắc phục CORS:
    -> Nếu bạn sử dụng cơ chế client (browser) -> gọi Server để lấy dữ liệu thì fix lỗi CORS trên server
    -> Nếu bạn không code backend, có thể fix = cách disable cors của browser (NOT recommended)
    -> Sử dụng same domain, hoặc server gọi tới server

-------------------------------------------------------------------------------------

- The 'useMemo' and 'useCallback' Hooks are similar. (Hãy coi việc ghi nhớ như việc lưu vào bộ nhớ đệm một giá trị để không cần phải tính toán lại - mỗi khi component render lại thì k chạy giá trị đó nữa (trừ khi các deps thay đổi))
  -> The main difference is that useMemo returns a memoized value and useCallback returns a memoized function
  -> The useMemo Hook only runs when one of its dependencies update.
 
 -------------------------------------------------------------------------------------

 - Thư viện next-auth: Hỗ trợ cơ chế stateful (session) và stateless (JWT - json web token) 
 


 - Luồng chạy:
    Bước 1: Nextjs (backend) + Next-auth => tự động tạo thêm các route cần thiết 
    Bước 2: User nhấn login (http://localhost:3000/api/auth/signin)
    Bước3: Next auth redirect to Provider. Quá trình user login được thực hiện tại Provider (tính bảo mật cao/tăng độ tin cậy)
    Bước 4: User login thành công "tại Provider", Provider sẽ trigger callback URL (đã cấu 
    hình trên provider)
    Bước 5: Nextjs nhận được trigger (dữ liệu) từ provider => Sau khi nhận được thông tin user từ Provider (bước 5), Nextjs sẽ lưu thông tin này vào 
            cookies, dưới dạng jwt (json web token) ở browser (tab application)
    -> jwt này sẽ có secret (password) để giải mã, và chỉ mình server mới giải mã được,
        Mỗi lần người dùng f5/refresh, client gửi lên server cookies (chứa jwt),
        Server (next auth) sẽ decode jwt, và lưu thông tin này (users) vào session (session này có thể ở next auth or next server), (session sẽ gửi lại lên browser hoặc browser sẽ dựa vào session này để hiển thị ng dùng nếu có - tự đoán thế ^^)
        Kể từ lúc này, tất cả logic code sẽ được xử lý dựa vào Session - thứ lưu trong memory của server



- Vì database ở các Provider lưu và trả ít thông tin -> mình sẽ dùng 'thông tin' Provider trả về -> để gọi BE và DB (truyền 'thông tin định danh' như là email)
  -> để tạo thêm account (nếu chưa cs trong DB) dựa trên 'thông tin' Provider trả về và 'lưu thêm nhiều thông tin' của người dùng hơn -> khi người dùng thao tác/refresh trang thì sẽ dùng thông tin 'nhận dạng' của Provider trả về và gọi BE để so sánh và lấy thông tin trong DB đã tạo

    + 1. Khi user sử dụng Provider để login, và login thành công, chúng ta cần gọi backend. 
        ở đây, chúng ta cần truyền lên "định danh" của người dùng, như là "email"
    + 2. Backend check "định danh" của người dùng. Nếu chưa tồn tại, tạo 1 account, setup 
        type = "PROVIDER"
        ví dụ: tài khoản login với github, sẽ có type = "GITHUB"
        tài khoản login thông thường (do hệ thống tự tạo), sẽ có type = "SYSTEM"
        Sau khi đã xác định được tài khoản nằm trong database của backend 
        => trả về thông tin như thông thường

    + Ở đây, chúng ta đang lưu dữ liệu ở 2 nơi:
        1 là Provider (lưu thông tin gốc của user)
        2 là database backend do chúng ta kiểm soát.
        Cần lưu tại 2 nơi, vì ví dụ, người dùng sau khi login sẽ tiến hành thao tác với hệ
        thống => tạo user dễ quản lý (theo id)


-------------------------------------------------------------------------------------

- Các cách tăng SEO:
 -> Next.js cung cấp các API về Metadata, giúp chúng ta có thể cải thiện SEO cũng như khả năng chia sẻ website (qua các mạng xã hội)
    1. Thêm tiêu đề, miêu tả cho web page
    2. Thêm miêu tả, image khi share link qua các mạng xã hội như Facebook, Twitter..
    3. Thêm logo cho website
    4. Tạo URL "thân thiện" cho việc search (khái niệm slug)
    5. File hỗ trợ cho bot crawl
    6. Responsive Images với Next Image

- Loaders: Là cơ chế để resize hình ảnh 
    -> Đối với ảnh phía local thì NextJS nó chính là loaders
    -> Đối với ảnh ở các back-end ngoài thì loaders là các thư viện khác

-------------------------------------------------------------------------------------
- SSG (Static Site Generation) (chỉ có tác dụng khi build project)
    + SSG là cách "tạo trước file .html" cho webpage.
    + Client gửi request -> server "gửi lại ngay lập tức" file .html đã được chuẩn bị trước, mà không tốn công "generate"
    => đấy gọi là "static" (bị động/tĩnh)
    => SSG giúp tăng trải nghiệm ng dùng (tốc độ load)

- ISR (Incremental Static Regeneration - tạo lại file tĩnh tăng)
    -> Dùng để update/sửa file html sau khi đã build rồi (k cần update/sửa rồi build lại)
    + 2 cách update/sửa là --> Time-based Revalidation: cài theo thời gian or On-demand Revalidation: cài theo yêu cầu (gọi api)

- RevalidateTag: Làm mới nơi nào có đúng 'tag' đấy

- ReavalidatePath: Làm mới cả 1 path(route) -> khác với router.refresh không clear "Data cache" (chỉ clear router cache và re-render page) => 
dùng cache: "no-store :v
